from dotenv import load_dotenv

load_dotenv()

import requests
import os
from typing import Optional, List
from pydantic import BaseModel

class Inference(BaseModel):
    input: Optional[str] = None
    """Input text for the inference."""

    output: Optional[str] = None
    """Output text generated by the model."""

    input_messages: Optional[List[dict]] = None
    """List of messages as sent to the LLM. Use input if this list makes no sense for your LLM"""

    user_prompt: Optional[str] = None

    system_prompt: Optional[str] = None

    context: Optional[str] = None

    start_time: Optional[int] = None
    """Start time of the inference."""

    end_time: Optional[int] = None
    """End time of the inference."""

    error: Optional[dict] = None
    """Error message, if applicable."""

    prompt_tokens: Optional[int] = None
    """Number of tokens used for the prompt."""

    completion_tokens: Optional[int] = None
    """Number of tokens generated as output."""

    total_tokens: Optional[int] = None
    """Total tokens for prompt and completion."""

    cost: Optional[float] = None
    """Cost of the inference, if applicable."""

    latency: Optional[float] = None

    settings: Optional[dict] = None
    """Settings related to the inference."""

    additional_metadata: Optional[dict] = None
    """Additional metadata related to the inference, if any."""

    tags: Optional[list[str]] = []
    """List of tags to be attached to this inference. Tags can be later used to automatically run triggers for a given tag"""

    feedback: Optional[bool] = None

def post_inference(inference: Inference):
    url = os.environ.get("OWNLAYER_API_URL") or "https://app.ownlayer.com/api/v1/inferences/"
    api_key = os.environ.get("OWNLAYER_API_KEY")

    if api_key is None:
        raise Exception("No OWNLAYER_API_KEY found")

    res = requests.post(
        url,
        json=inference.model_dump(),
        headers={
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        },
    )

    if not res.ok:
        print(f"Error tracing call {res.text}")
    else:
        print(f"New ownlayer trace {res.text}")